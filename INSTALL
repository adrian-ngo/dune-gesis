Installation Instructions
=========================

Inside the 'tools/installation/' sub-directory, you can find some useful shell scripts
which may help you download and install the software required to build DUNE-GESIS.

The author has tested this on the environments

OS version       : Linux version 3.13.0-39-generic (Ubuntu 14.04.1 LTS, trusty)
Compiler version : gcc/g++ 4.8 or clang/clang++ 3.4 
MPI version      : Open MPI 1.6.5 
CPU(s)           : Intel(R) Core(TM) i7-3630QM CPU @ 2.40GHz

and

OS version       : Linux version 2.6.32-431.29.2.el6.x86_64 (CentOS release 6.5 (Final))
Compiler version : gcc-4.8 (GCC) 4.8.3
MPI version      : Intel(R) MPI Library for Linux* OS, Version 4.1 Update 3 Build 20140124
CPUs             : Intel(R) Xeon(R) CPU E5-2680 v2 @ 2.80GHz

This is only meant to be a reference.


In order to build DUNE-GESIS you need at least the following software on your system:

* A standard compliant C++ compiler, tested are g++ (>= 4.8) and Clang (>=3.4). 
  Recent versions of ICC (>= 15) should work. 
* MPI (either OpenMPI, lam, or mpich suffice)
* automake (>= 1.9)
* autoconf (>= 2.62)
* libtool (>= 2.2)


First download and install external libraries:
'getSoftware.sh' downloads the external software libraries.
'bash_install.sh' can be used to build and install those external software libraries into your home directory.

Get the correct version of the DUNE modules on which DUNE-GESIS is based:
'getDUNE.sh' helps you download the correct version of all DUNE modules (tarballs) required for DUNE-GESIS.
'gitcloneDUNE.sh' (as an alternative to 'getDUNE.sh') helps you download the correct version of all DUNE modules via git (faster!).

'example.opts' is an example of a DUNE build configuration file 
that helps you build all DUNE modules using the tool './dune-common/bin/dunecontrol'.
Keep the reference paths to BOOST, UG, FFTW3 and HDF5 (and probably metis) 
synchronized with the variables softwaredir and installdir inside 'bash_install.sh'

Have a look inside these scripts before you run them.

For a full explanation of the DUNE installation process please read the installation notes [0]. 









General build instructions for DUNE modules
-------------------------------------------

The following introduction is related to the general way how DUNE modules are build. 

Suppose you have downloaded all DUNE modules of interest to your
computer and extracted then in one common directory. See [1] for a
list of available modules.

To compile the modules Dune has to check several components of
your system and whether prerequisites within the modules are met. For
the ease of users we have designed a custom build system on top of the
automake tools. Run

  ./dune-common/bin/dunecontrol all

to commence those tests and build all modules you have
downloaded. Don't worry about messages telling you that libraries are
missing: they are only needed for grid-self-checks we need for
developing.

You can customize the build to your specific needs by using an options file
(see below)

  ./dune-common/bin/dunecontrol --opts=/path_to/file.opts

If you did not tell dunecontrol to install with an options file you
need to run

  ./dune-common/bin/dunecontrol make install

to install Dune (you may need root-permissions for the install
part depending on the prefix set)

A more comprehensive introduction to the build system can be found in [2].

Passing options to the build process
------------------------------------

Using the dunecontrol script the following atomic commands can be
executed:

- autogen (runs autogen in each module, only needed when downloaded
  via svn)
- configure (runs the configure tests for each module
- exec (executes a command in each module directory)
- make (runs make for each module)
- update (updates the svn version)

The composite command all simply runs autogen, configure and make for
each module.

As it is often not convenient (and for the target all impossible) to
specify the options for each command as parameters after the call, one
can pass the options via file specified by the --opts=<file>
option. For each atomic command one specify the options via a ine

<COMMANY_UPPERCASE>_FLAGS=<flags> # e.g.: MAKE_FLAGS=install

The available options for make and svn are the natural ones. The
configure commands available can be found by issuing

dunecontrol --only=dune-common configure --help

and for autogen by

dunecontrol --only=dune-common autogen --help

(In the svn version this has to be calles after running autogen.)


An example of an options file is

  # use a special compiler (g++ version 3.4) and install to a custom
  # directory, default is /usr/local/bin
  CONFIGURE_FLAGS="CXX=g++-4.8 --prefix='/tmp/Hu Hu'"
  # Set the default target of make to install. Now the call above will
  # not just build the DUNE modules but also install it
   MAKE_FLAGS=install
  # The default versions of automake and autogen are not sufficient
  # therefore we need to specify what versions to use
  AUTOGEN_FLAGS="--ac=2.59 --am=1.9

Links
-----

0. http://www.dune-project.org/doc/installation-notes.html
1. http://www.dune-project.org/download.html
2. http://dune-project.org/doc/buildsystem/buildsystem.pdf
